function accordeonFood(){
  const foods = document.querySelectorAll(".food__item");
  const menu = document.querySelector(".accordeon--vertical");
  menu.addEventListener("click" , function(event){
    event.preventDefault();
    const target = event.target;
      if(target.classList.contains("food__vertical")){
        const food = target.parentNode;
        const content = target.nextElementSibling;
          for (const iterator of foods) {
            if(iterator !== food){
              iterator.classList.remove("food__description--active");
              iterator.lastElementChild.style.width= 0;
            }
          }
            if(food.classList.contains("food__description--active")){
              food.classList.remove("food__description--active");
              content.style.width = 0;
            } else {
              food.classList.add("food__description--active");
              content.style.width = calculateWidth() + "px";
          }
      }else if (target.classList.contains("food__name")){
        const food = target.parentNode.parentNode;
        const content = target.parentNode.nextElementSibling;
          for (const iterator of foods) {
            if(iterator !== food){
              iterator.classList.remove("food__description--active");
              iterator.lastElementChild.style.width= 0;
            }
          }
            if(food.classList.contains("food__description--active")){
              food.classList.remove("food__description--active");
              content.style.width = 0;
            } else {
              food.classList.add("food__description--active");
              content.style.width = calculateWidth() + "px";
          }
      }
  });
  function calculateWidth(){
    let windowWidth = document.documentElement.clientWidth;
    let links = document.querySelectorAll('.food__vertical');
    let linksWidth = parseInt(getComputedStyle(links[0]).width);
    let reqWidth = windowWidth - linksWidth * links.length;
    return reqWidth > 520 ? 520 : reqWidth;
  }
  }
  accordeonFood();;function accordeonTeam(){
  const members = document.querySelectorAll(".team__item");
  const team = document.querySelector(".team__list");

  team.addEventListener("click" , function(event){
      event.preventDefault(); 
      const target = event.target; 

      if(target.classList.contains("team__link")){
          const member = target.parentNode; 
          const content = target.nextElementSibling;  
          const contentHeight = content.firstElementChild.clientHeight;
       
              for (const iterator of members) {
                  if(iterator !== member){
                      iterator.classList.remove("team__item--active");
                      iterator.lastElementChild.style.height= 0;
                  }
              }

              if(member.classList.contains("team__item--active")){
                  member.classList.remove("team__item--active");
                  content.style.height = 0;
              }else{
                  member.classList.add("team__item--active");
                  content.style.height = contentHeight + "px";
              }
      }
  });
}

accordeonTeam();
;const myForm = document.querySelector('#delievery');
const orderButton = document.querySelector('#orderButton');

orderButton.addEventListener('click', event => {
  event.preventDefault();

  if (validateForm(myForm)) {
    const data = {
      name: myForm.elements.name.value,
      phone: myForm.elements.phone.value,
      comment: myForm.elements.delievery.value,
      to: 'test@mail.ru',
    };
    const xhr = new XMLHttpRequest();
    xhr.responseType = 'json';
    xhr.open('POST', 'https://webdev-api.loftschool.com/sendmail');
    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    xhr.send(JSON.stringify(data));
    xhr.addEventListener('load', () => {
      if (xhr.response.statusText <= 200) {
        let title = 'Ответ от сервера';
        let text = 'Данные получены';
        renderPopup(title, text);
      } else {
        let title = 'Ответ от сервера';
        let text = 'Ошибка сервера';
        renderPopup(title, text);
      }
    })
  }
});

function validateForm(form) {
  let valid = true;

  if (!validateField(form.elements.name)) {
    valid = false;
  }
  if (!validateField(form.elements.phone)) {
    valid = false;
  }
  if (!validateField(form.elements.delievery)) {
    valid = false;
  }

  return valid;
}

function validateField(field) {
  field.nextElementSibling.textContent = field.validationMessage;
  return field.checkValidity();
}
;let burger  = document.querySelector('.hamburger-menu');
let overlay = document.querySelector('.menu');
let body = document.querySelector('body');

let links = document.querySelectorAll('.menu__link');

links.forEach(function(element){
  element.addEventListener('click' , toggleMenu);
})

function toggleMenu(){
  burger.classList.toggle('hamburger-menu--active');
  overlay.classList.toggle('menu--active');
  body.classList.toggle('body--active');
}

burger.addEventListener('click' , toggleMenu);
;let onePageScroll = () => {
  const sections = $(".page");
  const display = $(".main-content");
  let inscroll = false;

  const mobileDetect = new MobileDetect(window.navigator.userAgent);
  const isMobile = mobileDetect.mobile();

  const countPositionPercent = sectionEq => {
    return `${sectionEq * -100}%`;
  };

  const switchActiveClass = (elems, elemNdx) => {
    elems
      .eq(elemNdx)
      .addClass("active")
      .siblings()
      .removeClass("active");
  };

  const unBlockScroll = () => {
    setTimeout(() => {
      inscroll = false;
    }, 1300); // подождать пока завершится инерция на тачпадах
  };

  const performTransition = sectionEq => {
    if (inscroll) return;
    inscroll = true;

    const position = countPositionPercent(sectionEq);
    const switchFixedMenuClass = () =>
      switchActiveClass($(".pagination__item"), sectionEq);

    switchActiveClass(sections, sectionEq);
    switchFixedMenuClass();

    display.css({
      transform: `translateY(${position})`
    });

    unBlockScroll();
  };

  const scrollViewport = direction => {
    const activeSection = sections.filter(".active");
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    if (direction === "next" && nextSection.length) {
      performTransition(nextSection.index());
    }

    if (direction === "prev" && prevSection.length) {
      performTransition(prevSection.index());
    }
  };

  $(document).on({
    wheel: e => {
      const deltaY = e.originalEvent.deltaY;
      const direction = deltaY > 0 ? "next" : "prev";
      scrollViewport(direction);
    },
    keydown: e => {
      const tagName = e.target.tagName.toLowerCase();
      const userTypingInInputs = tagName === "input" || tagName === "textarea";

      if (userTypingInInputs) return;

      switch (e.keyCode) {
        case 40:
          scrollViewport("next");
          break;

        case 38:
          scrollViewport("prev");
          break;
      }
    }
  });

  $("[data-scroll-to]").on("click", e => {
    e.preventDefault();
    performTransition(parseInt($(e.currentTarget).attr("data-scroll-to")));
  });

  // разрешаем свайп на мобильниках
  if (isMobile) {
    window.addEventListener(
      "touchmove",
      e => {
        e.preventDefault();
      },
      { passive: false }
    );

    $("body").swipe({
      swipe: (event, direction) => {
        let scrollDirecrion;
        if (direction === "up") scrollDirecrion = "next";
        if (direction === "down") scrollDirecrion = "prev";
        scrollViewport(scrollDirecrion);
      }
    });
  }
}

onePageScroll();;let player;

const formatTime = timeSec => {
  const roundTime = Math.round(timeSec);

  const minutes = Math.floor(roundTime / 60);
  const seconds = roundTime - minutes * 60;

  const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;

  return `${minutes}:${formattedSeconds}`;
};

const onPlayerReady = () => {
  let interval;
  let durationSec = player.getDuration();

  $(".player__duration-estimate").text(formatTime(durationSec));

  if (typeof interval !== "undefined") {
    clearInterval(interval);
  }

  interval = setInterval(() => {
    const completedSec = player.getCurrentTime();
    const completedPercent = (completedSec / durationSec) * 100;

    $(".player__playback-button").css({
      left: `${completedPercent}%`
    });

    $(".player__duration-completed").text(formatTime(completedSec));
  }, 1000);
};

const eventsInit = () => {
  $(".player__start").on("click", e => {
    e.preventDefault();
    const btn = $(e.currentTarget);

    if (btn.hasClass("paused")) {
      player.pauseVideo();
    } else {
      player.playVideo();
    }
  });

  $(".player__playback").on("click", e => {
    const bar = $(e.currentTarget);
    const newButtonPosition = e.pageX - bar.offset().left;
    const buttonPosPercent = (newButtonPosition / bar.width()) * 100;
    const newPlayerTimeSec = (player.getDuration() / 100) * buttonPosPercent;

    $(".player__playback-button").css({
      left: `${buttonPosPercent}%`
    });

    player.seekTo(newPlayerTimeSec);
  });

  $(".player__splash").on("click", e => {
    player.playVideo();
  });
};

const onPlayerStateChange = event => {
  const playerButton = $(".player__start");
  /*
  -1 (воспроизведение видео не начато)
  0 (воспроизведение видео завершено)
  1 (воспроизведение)
  2 (пауза)
  3 (буферизация)
  5 (видео подают реплики).
   */
  switch (event.data) {
    case 1: 
      $('.player__wrapper').addClass('active');
      playerButton.addClass("paused");
      break;
    case 2: 
      playerButton.removeClass("paused");
      break;
  }
};

function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "405",
    width: "660",
    videoId: "KEkrWRHCDQU",
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerStateChange
    },
    playerVars: {
      controls: 0,
      disablekb: 0,
      showinfo: 0,
      rel: 0,
      autoplay: 0,
      modestbranding: 0
    }
  });
}

eventsInit();;let popupFeedback = () => {
    function popupReview(){
    const reviewList = document.querySelector('.feedback__list');
  
    reviewList.addEventListener('click' , function(e){
      if(e.target.classList.contains('feedback__btn')){
        const title = e.target.parentNode.querySelector('.feedback__subtitle').textContent;
        const text = e.target.parentNode.querySelector('.feedback__text').textContent;
      
        renderPopup(title, text);
      }
    })
  }

  popupReview();
  }
popupFeedback();;function renderPopup(title, text){
  const popup = document.querySelector('.popup');

  popup.classList.add('popup--active');

  popup.querySelector('.popup__title').textContent = title;
  popup.querySelector('.popup__text').textContent = text;

  popup.querySelector('.popup__exit').addEventListener('click' , e=>{
    e.preventDefault();

    popup.classList.remove('popup--active');
  })
};let sliderBurger = () => {
  const left = document.querySelector(".arrow__slide--left");
  const right = document.querySelector(".arrow__slide--right");
  const items = document.querySelector("#slider");

  right.addEventListener("click", function(e) {
    e.preventDefault();
    loop("right");
  });

  left.addEventListener("click", function(e) {
    e.preventDefault();
    loop("left");
  });

  function loop(direction) {
    if (direction === "right") {
      items.appendChild(items.firstElementChild);
    } else {
      items.insertBefore(items.lastElementChild, items.firstElementChild);
    }
  }
}
sliderBurger();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
